#!/usr/bin/env python

import os, sys, re, time
import emc

dpi = 300
dpmm = dpi / 25.4
mmpd = 1 / dpmm

print sys.argv
P, Q = map(lambda x: float(x), sys.argv[1:])
#print 'P=%g Q=%g' % (P, Q)

ini = emc.ini('2x_Laser.ini')
emc.nmlfile = ini.find('EMC', 'NML_FILE')

axis = ini.find('RASTER', 'AXIS')
if axis is None:
    axis = 0

stat = emc.stat()

cmd = emc.command()

stat.poll()
origin = stat.origin[axis]

if stat.current_line < 0:
    print 'cannot execute M101 from MDI'
    sys.exit(1)

def get_comment(file, lineno):
    fp = open(file, 'r')
    lineno = lineno - 1
    for i, line in enumerate(fp):
	if lineno == i:
	    break
    print 'line = %s' % line
    m = re.search('\(([^)]+)\)', line)
    if m is not None:
	return m.group(1).strip()
    return ''

print 'origin = %g' % origin
print 'file = %s : %d'  % (stat.file, stat.current_line)
print 'image = %s' % get_comment(stat.file, stat.current_line)

# NO
#cmd.mdi("M1 (testing)")

if os.fork():
    # parent must wait until child is ready, then exit
    #...
    time.sleep(2)
    sys.exit(0)
else:
    os.setsid()
    stream = os.popen('halstreamer', 'w')

    # image = 

    for y in xrange(0,25):
	# off until preloaded at origin
	stream.write('0 1 %0.3f\n' % (origin))
	for x in xrange(0,1000,200):
	    # off until we hit first region
	    stream.write('0 0 %0.3f\n' % (origin + (x +   0) * mmpd))
	    # on until region end
	    stream.write('1 0 %0.3f\n' % (origin + (x + 100) * mmpd))

	# off until preloaded at end
	stream.write('0 0 %0.3f\n' % (origin + 1000 * mmpd))
	for x in xrange(800,-1,-200):
	    # off until we hit first region
	    stream.write('0 0 %0.3f\n' % (origin + (x + 100) * mmpd))
	    # on until region end
	    stream.write('1 0 %0.3f\n' % (origin + (x +   0) * mmpd))

    # transform to gray, then dither/halftone
    # possibly rotate based on axis
    # while read bits
    # make on/off spans
    # apply origin to x
    # write output to 'stream'
    # (if first, write to parent to let it exit)
    stream.close()
    print 'DONE!'
